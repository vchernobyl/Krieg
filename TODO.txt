---------------
Open Tasks 2021
---------------

February:
---------
1. Implement rigidbody physics component to control actors by applying force, where the
   change to the actors position is done by calculating velocity. [DONE]
2. Implement functionality for the animation component to support loading and switching
   of multiple animations. [DONE]
3. Add support for SDL_RendererFlip flag to the SpriteComponent. [DONE]
4. Add support for flipped animations. [DONE]
5. Implement input system to detect key up and key down events. [DONE]
6. Implement hero basic animation changes based on the keyboard input. [DONE]
7. Implement accelerated movement. [DONE]
8. Implement decelerated movement. [DONE]
9. Implement basic jumping. [DONE]

March:
------
1. Fix hero run animation transition. [DONE]
2. Implement non-looping animations. [DONE]
3. Implement method to check if given animation is finished. [DONE]
4. Implement basic jumping animation. [DONE]
5. Add flag to track hero's direction. [DONE]
6. Refactor switch-case state handling into a state wrapper. [DONE]
7. Implement new idle and running state transition. [DONE]
8. Play movement animations based on players velocity. [DONE]
9. Implement jumping state and animation. [DONE]
10. Add static game background component. [DONE]
11. Implement player camera with scrolling. [DONE]
12. Fix jump glitch. [DONE]
13. Fix sprite component draw method to draw at origin instead of the center. [DONE]
14. Basic tile drawing. [DONE]
15. Draw different types of tiles based on the tile id. [DONE]
16. Load csv map from a file. [DONE]
17. Implement tile set class. [DONE]
18. Implement tile map class. [DONE]
19. Refactor csv map loading. [DONE]
20. Refactor tile set class. [DONE]
21. Implement multiple map layer drawing. [DONE]
22. Implement parallax scrolling. [DONE]
23. Implement support for separate tile set per tile map component. [DONE]
24. Implement basic box collider component. [DONE]
25. Implement physics world that checks collider collisions. [DONE]
26. Add collider drawing. [DONE]
27. Fix box collider position bug when scrolling the camera. [DONE]
28. Add XML parsing library. [DONE]
29. Parse tiled xml map and save tile set data into a struct. [DONE]
30. Parse tiled xml map and save layer data into a struct/class. [DONE]
31. Parse tile ids and create tile structs. [DONE]
32. Render multiple tile map layers. [DONE]
33. Add colliders to the ground layer. [DONE]
34. Fix tile set image loading error. [DONE]
35. Allow tile map to contain information about colliders. [DONE]
36. Implement debug renderer for object outline and collider box rendering. [DONE]

April
-----
1. Implement ray vs rect collision function. [DONE]
2. Implement very simple Rigidbody which contains velocity. This is used for dynamic box collision detection. [DONE]
3. Implement a custom Rectangle struct/class. [DONE]
4. Fix collision bug. Collisions are not correctly resolved in a lot of instances. [DONE]
5. Fix player getting stuck in between two rect colliders. [DONE]
6. Move collision detection and resolution to the physics world class. [DONE]
7. Remove player-only collision detection and detect collision with arbitrary objects. [DONE]
8. Make physics world to be a pointer in the game. [DONE]
9. Clean up the Game.h headers. [DONE]
10. Clean up the Collisions API and refactor Manifold/ContactInfo. [DONE]
11. Refactor box collider component. [DONE]
12. Put Collisions checking into the box collider component. [DONE]
13. Implement Renderer class and move camera class inside of it. [DONE]
14. Log crash information in the console before closing. [DONE]
15. Compile to an output directory with a single executable. [DONE]
16. Allow VS debugger to attach and inspect running code. [DONE]
17. Implement global static debug renderer for all shapes. [DONE]
18. Make a prototype map. [DONE]
19. Make a prototype character. [DONE]
20. Implement tile map renderer. [DONE]
21. Clean up the included headers. [DONE]
22. Add compiler flag to enable/disable debug rendering. [DONE]
23. Add simple bullet shooting. [DONE]
24. Destroy bullets on impact. [DONE]
25. Fix stutterings when shooting and moving forward. [DONE]
26. Implement texture region drawing. [DONE]
27. Add basic moving AI enemy. [DONE]

May:
----
1. Pass collision info to the OnCollisionEnter function. [DONE]
2. Allow player single jump only. [DONE]
3. Flip player/enemy sprites in the direction they are moving. [DONE]
4. Basic audio support. [DONE]
5. Fix bullets passing through the enemies. [DONE]
6. Fix bullets passing through other colliders if bullet is created within the other collider. [DONE]
7. Add basic jumping and shooting sounds. [DONE]
8. Add gun muzzle flash. [DONE]
10. Fix audio memory leaks (nothing to do with audio though, debug rects were not cleared..). [DONE]
11. Add minimal bullet spread. [DONE]
12. Basic particle system. [DONE]
  12.1 Implement Vector3 and Vector4 for colors. [DONE]
  12.2 Implement basic particle drawing. [DONE]
  12.3 Implement particle rotation. [DONE]
13. Move texture loading to the renderer. [DONE]
  13.1 Implement SDL_Texture wrapper class. [DONE]
  13.2 Make SpriteComponent use Texture class. [DONE]
  13.3 Make TileMap use Texture class. [DONE]
  13.4 Make TileMap use Rectangle class. [DONE]
  13.5 Remove texture handling from the Game class. [DONE]
14. Refactor Rect class. [DONE]
15. Fix OnCollisionEnter not being call on the Enemy on every bullet hit. [DONE]
15.1 Implement OnTriggerEnter function. [DONE]
15.2 Remove dynamic casts in collision where possible. [DONE]
16. Add particles to the renderer automatically. [DONE]
17. Leave dust particles when player is jumping. [DONE]
18. Add bullet spark particles. [DONE]
19. Make rotation as part of the particle props. [DONE]
20. Fix particles with 0 alpha. [DONE]
21. Fix collisions happening too far from the actual object. [IN PROGRESS]
  21.1 Add line drawing to debug bullet raycast. [DONE]
22. Implement basic discrete collision detection using Minkowski Difference. [DONE]
23. Implement collision resolution using the penetration vector. [DONE]
24. Don't resolve collisions with objects marked as static. [DONE]

June:
-----
1. Implement collision sliding. [DONE]
2. Fix actor collision when direction arrow is pressed. [DONE]
2. Implement robust discrete collision detection and resolution with external forces. [DONE]
3. Fix actor micro-shaking when moving. [DONE]
4. Fix bullet collision. [DONE]
5. Organize project dependencies inside the external folder. [DONE]
  5.1 Create and add pugixml as a lib in external. [DONE]
  5.2 Add SDL2_image to the external. [DONE]
  5.3 Add SDL2 to the external. [DONE]
  5.4 Add FMOD to the external. [DONE]
6. Add Box2D to the external. [DONE]
7. Integrate b2World into the physics world class. [DONE]
8. Implement physics world debug renderer. [DONE]
9. Fix collider positions. [DONE]

July:
-----
1. Convert pixel size to unit size. [DONE]
2. Fix box collider sizes, they are not aligning at the moment. [DONE]
3. Fix objects moving in increments instead of smooth movement. [DONE]
4. Fix camera movement. [DONE]
5. Fix bodies moving in weird trajectories, probably because of wrong center of mass? [DONE]
6. Add debug renderer color support for different kinds of shapes and types. [DONE]
7. Object position and size from tile map should be using units instead of pixels. [DONE]
8. We don't need a separate tile map loader class, it can be a function instead (it doesn't have state). [DONE]
9. Remove struct constructors in tile map header, they are not needed. [DONE]
10. Remove all the useless pointers in the tile map loader and tile map. [DONE]
11. Remove tile map pointer from the tile map renderer. [DONE]
12. Refactor how rigidbodies and shapes are being created. [DONE]
13. Fix debug renderer camera bug. [DONE]
14. Implement a proper accelerated player movement. [DONE]
15. Implement a proper force based jumping. [DONE]
16. Add jumping sounds. [DONE]
17. Add basic shooting. [DONE]
18. Destroy bullets on impact. [DONE]
19. Remove bullet-enemy physics impact and only keep collision detection. [DONE]
20. Center the debug rect that is drawn to show the center of mass. [DONE]
21. Don't allow for bullets to push other dynamic bodies. [DONE]
22. Add muzzle flash. [DONE]
23. Add a small randomness to the bullet trajectory. [DONE]
24. Add jumping particles. [DONE]
25. Add bullet impact particles. [DONE]
26. Add contact information to the actor contact callbacks. [DONE]
27. Implement circle collider. [DONE]
28. Fix bullet impact contact position on the right side. [DONE]
29. Make flash effect when enemy is hit. [DONE]
30. Add support for sprite regions. [DONE]
31. Implement smooth camera follow (lerp/smoothdamp). [IN PROGRESS]
32. Implement camera as a component. [DONE]
33. Remove Color struct from debug renderer and use Vector3/4 instead. What the fuck was I thinking? [DONE]
34. Fix camera component lagging behind the owner. Probably because position is being updated in the physics step. [DONE]
35. Update the camera component inside the late update. [DONE]

August:
-------
1. Faster bullets. [DONE]
2. Merge SDL_image and SDL externals into a single folder. [DONE]
3. Convert rendering to use OpenGL. [DONE]
4. Draw debug box. [DONE]

September:
----------
1. Learn basics of OpenGL. [DONE]
2. Pass the color to the fragment shader. [DONE]
3. Fix crash when rendering box sprites and debug shapes. [DONE]
5. Replace DebugRenderer with DebugDraw and make it globally available. [DONE]

October:
--------
1. Implement renderer view/projection functionality. [DONE]
2. Fix external includes to have a namespace. [DONE]
3. Fix collider position/drawing. [DONE]
4. Fix renderer rotation projection. [DONE]
5. Investigate kinematic/static body collision. [DONE]
   (Box2D docs: Static bodies do NOT collide with other static or kinematic bodies.)
6. Draw non-rectangle shape sprites. [DONE]
7. Add DrawLine function. [DONE]
8. Draw polygon shapes using DrawLine. [DONE]
9. Provide default color to the debug draw functions [DONE].
10. Integrate sprite batch into the renderer. [DONE]
11. Integrate sprite batch into the sprite component. [DONE ]
12. Refactor/clean-up the texture shader. [DONE]
13. Add mouse state to the input system. [DONE]
14. Implement camera zoom in/out. [DONE]
15. Transform mouse screen position to world position. [DONE]
16. Implement camera translation. [DONE]
17. Don't always zoom the camera at (0, 0) but instead at the center of the camera position. [DONE]
18. Moving of camera with middle mouse button. [DONE]
19. Move screen to world projection from renderer to the camera component. [DONE]
20. Player movement. [DONE]
21. Rotate ship by the closest angle. [DONE]
22. Simple enemy class without movement. [DONE]
23. Enemy tries to follow the player. [DONE]
24. Add enemy ship selection sprite. [DONE]
25. Implement basic point/object overlap querying. [DONE]
26. Implement enemy selection. [DONE]
27. Fix AABB query, currently it's not a point but a unit size box. [DONE]
28. Move rigidbody position whenever actor position is changed. [DONE]
29. After some time a single frame takes more than 16ms (~45ms) to render/update. [DONE]
The GameProgramming code example (chapter 6) has the exact same issue. Since it's not a critical
issue and happening only rarely (plus it is not caused by the gameplay code,
but the engine code, most likely rendering), I will leave this one slide for now.
As a note - it looks like the SDL_GL_SwapWindow function was the one that was chugging.
30. Add basic shooting. [DONE]
31. Add basic font rendering. [DONE]
32. Untabify all source files. [DONE]

November:
---------
1. Draw text in screen space. [DONE]
We can use two sprite batches - one for regular sprites and another one for UI.
This way each sprite batch would have it's own view matrix. This will allow for sprites
to be drawn however we want, UI elements would be drawn in screen space, but regular sprites
would be drawn in world space (given a world matrix).
2. Launch projectiles at selected enemies only. [DONE]
3. Add textual debug info on the screen. [DONE]. For this we need a support for a more `dynamic`
font because the text is going to be changing rapidly per frame, and we shouldn't create text texture
every frame. Bitmap font could be a potential solution.
4. Remove the `Component` suffix from all the component classes.
5. Select targetable component actors with mouse click. [DONE]
6. Selection of actors can be simplified. Currently only components with rigidbody can be selected,
which does not make sense. We need some sort of bounding box over every entity
with sprite as well. This turned out to be a bad idea since sprite bounds is larger thann
the fixture, which makes the selection not precise. [WON'T DO]
7. Automatically shoot at selected targets with specific fire rate. [DONE]
8. Destroy targets after taking some damage. [DONE]
9. Remove target from rocket launcher list when it is destroyed. [DONE]
10. Make damageable actors to flash the sprite when damaged. [DONE]
11. Make particles work with OpenGL. [DONE]
12. Add basic particles when dealing damage. [IN PROGRESS]
13. Refactor particle emitter. [IN PROGRESS]
  13.1. Add support for emission rate. [DONE]
  13.2. Add support for particle positions following the owner. [DONE]
  13.3. Add support for looping and non-looping emissions. [DONE]
14. Emit particles at the center of the owner. [DONE]
15. Emit rocket explosion particles from the rocket itself. [DONE]
16. Write enemy generator.
17. Add basic sound effects. [DONE]
18. Better enemy movement. Should not collide with one another. [IN PROGRESS]
19. Enemy attacks. [IN PROGRESS]

Notes from 'Game Engine Architecture':
- Whenever we want to express a IS-A relationship via inheritence, think about whether or not
  it could be expressed better as a HAS-A relationship. Should AnimatedSprite inherit from Sprite?
  Maybe it could be designed better without inheritence and with a composition instead.
- C++11 has a very useful 'final' keyword to restrict overriding of virtual functions and
  inheriting from class/struct which wasn't designed for it.

Backlog
-------
11. Clean up the SDL main initialization: https://wiki.libsdl.org/SDL_SetMainReady
12. Load default texture if texture with a given name is missing.
14. Internalize SDL_Scancode (and SDL dependency) inside the input system.
15. Implement custom logger.

How be brutally effective:
--------------------------
1. Get things done quickly
2. Get things done robustly
3. Make things simple
4. Finish things!
