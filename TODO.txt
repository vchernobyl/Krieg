---------------
Open Tasks 2021
---------------

February:
---------
1. Implement rigidbody physics component to control actors by applying force, where the
   change to the actors position is done by calculating velocity. [DONE]
2. Implement functionality for the animation component to support loading and switching
   of multiple animations. [DONE]
3. Add support for SDL_RendererFlip flag to the SpriteComponent. [DONE]
4. Add support for flipped animations. [DONE]
5. Implement input system to detect key up and key down events. [DONE]
6. Implement hero basic animation changes based on the keyboard input. [DONE]
7. Implement accelerated movement. [DONE]
8. Implement decelerated movement. [DONE]
9. Implement basic jumping. [DONE]

March:
------
1. Fix hero run animation transition. [DONE]
2. Implement non-looping animations. [DONE]
3. Implement method to check if given animation is finished. [DONE]
4. Implement basic jumping animation. [DONE]
5. Add flag to track hero's direction. [DONE]
6. Refactor switch-case state handling into a state wrapper. [DONE]
7. Implement new idle and running state transition. [DONE]
8. Play movement animations based on players velocity. [DONE]
9. Implement jumping state and animation. [DONE]
10. Add static game background component. [DONE]
11. Implement player camera with scrolling. [DONE]
12. Fix jump glitch. [DONE]
13. Fix sprite component draw method to draw at origin instead of the center. [DONE]
14. Basic tile drawing. [DONE]
15. Draw different types of tiles based on the tile id. [DONE]
16. Load csv map from a file. [DONE]
17. Implement tile set class. [DONE]
18. Implement tile map class. [DONE]
19. Refactor csv map loading. [DONE]
20. Refactor tile set class. [DONE]
21. Implement multiple map layer drawing. [DONE]
22. Implement parallax scrolling. [DONE]
23. Implement support for separate tile set per tile map component. [DONE]
24. Implement basic box collider component. [DONE]
25. Implement physics world that checks collider collisions. [DONE]
26. Add collider drawing. [DONE]
27. Fix box collider position bug when scrolling the camera. [DONE]
28. Add XML parsing library. [DONE]
29. Parse tiled xml map and save tile set data into a struct. [DONE]
30. Parse tiled xml map and save layer data into a struct/class. [DONE]
31. Parse tile ids and create tile structs. [DONE]
32. Render multiple tile map layers. [DONE]
33. Add colliders to the ground layer. [DONE]
34. Fix tile set image loading error. [DONE]
35. Allow tile map to contain information about colliders. [DONE]
36. Implement debug renderer for object outline and collider box rendering. [DONE]

April
-----
1. Implement ray vs rect collision function. [DONE]
2. Implement very simple Rigidbody which contains velocity. This is used for dynamic box collision detection. [DONE]
3. Implement a custom Rectangle struct/class. [DONE]
4. Fix collision bug. Collisions are not correctly resolved in a lot of instances. [DONE]
5. Fix player getting stuck in between two rect colliders. [DONE]
6. Move collision detection and resolution to the physics world class. [DONE]
7. Remove player-only collision detection and detect collision with arbitrary objects. [DONE]
8. Make physics world to be a pointer in the game. [DONE]
9. Clean up the Game.h headers. [DONE]
10. Clean up the Collisions API and refactor Manifold/ContactInfo. [DONE]
11. Refactor box collider component. [DONE]
12. Put Collisions checking into the box collider component. [DONE]
13. Implement Renderer class and move camera class inside of it. [DONE]
14. Log crash information in the console before closing. [DONE]
15. Compile to an output directory with a single executable. [DONE]
16. Allow VS debugger to attach and inspect running code. [DONE]
17. Implement multiple dynamic box collisions (enemy vs player).
18. Implement global static debug renderer for all shapes.
19. Make a prototype map. [DONE]
20. Make a prototype character. [DONE]
21. Implement tile map renderer. [DONE]
22. Clean up the included headers. [DONE]

Backlog
-------
1. Implement tile map parallax.
2. Implement basic scene manager.
3. Extract resource handling into a separate resource manager.
4. Implement sprite component drawing from source region if given.
5. Detect collisions between two moving objects.
6. Replace SDL_Rect with custom Rect struct/class and use SDL_Rect only in rendering.
7. Refactor Tile map load function.
8. Refactor Tile map structs/classes.
9. Put all player states in a single file.
10. Implement SpriteDirection instead of AnimDirection and pass that on to animations.
11. Clean up the SDL main initialization: https://wiki.libsdl.org/SDL_SetMainReady

How be brutally effective:
--------------------------
1. Get things done quickly
2. Get things done robustly
3. Make things simple
4. Finish things!
