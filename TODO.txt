---------------
Open Tasks 2021
---------------

February:
---------
1. Implement rigidbody physics component to control actors by applying force, where the
   change to the actors position is done by calculating velocity. [DONE]
2. Implement functionality for the animation component to support loading and switching
   of multiple animations. [DONE]
3. Add support for SDL_RendererFlip flag to the SpriteComponent. [DONE]
4. Add support for flipped animations. [DONE]
5. Implement input system to detect key up and key down events. [DONE]
6. Implement hero basic animation changes based on the keyboard input. [DONE]
7. Implement accelerated movement. [DONE]
8. Implement decelerated movement. [DONE]
9. Implement basic jumping. [DONE]

March:
------
1. Fix hero run animation transition. [DONE]
2. Implement non-looping animations. [DONE]
3. Implement method to check if given animation is finished. [DONE]
4. Implement basic jumping animation. [DONE]
5. Add flag to track hero's direction. [DONE]
6. Refactor switch-case state handling into a state wrapper. [DONE]
7. Implement new idle and running state transition. [DONE]
8. Play movement animations based on players velocity. [DONE]
9. Implement jumping state and animation. [DONE]
10. Add static game background component. [DONE]
11. Implement player camera with scrolling. [DONE]
12. Fix jump glitch. [DONE]
13. Fix sprite component draw method to draw at origin instead of the center. [DONE]
14. Basic tile drawing. [DONE]
15. Draw different types of tiles based on the tile id. [DONE]
16. Load csv map from a file. [DONE]
17. Implement tile set class. [DONE]
18. Implement tile map class. [DONE]
19. Refactor csv map loading. [DONE]
20. Refactor tile set class. [DONE]
21. Implement multiple map layer drawing. [DONE]
22. Implement parallax scrolling. [DONE]
23. Implement support for separate tile set per tile map component. [DONE]
24. Implement basic box collider component. [DONE]
25. Implement physics world that checks collider collisions. [DONE]
26. Add collider drawing. [DONE]
27. Fix box collider position bug when scrolling the camera. [DONE]
28. Add XML parsing library. [DONE]
29. Parse tiled xml map and save tile set data into a struct. [DONE]
30. Parse tiled xml map and save layer data into a struct/class. [DONE]
31. Parse tile ids and create tile structs. [DONE]
32. Render multiple tile map layers. [DONE]
33. Add colliders to the ground layer. [DONE]
34. Fix tile set image loading error. [DONE]
35. Allow tile map to contain information about colliders. [DONE]
36. Implement debug renderer for object outline and collider box rendering. [DONE]

April
-----
1. Implement ray vs rect collision function. [DONE]
2. Implement very simple Rigidbody which contains velocity. This is used for dynamic box collision detection. [DONE]
3. Implement a custom Rectangle struct/class. [DONE]
4. Fix collision bug. Collisions are not correctly resolved in a lot of instances. [DONE]
5. Fix player getting stuck in between two rect colliders. [DONE]
6. Move collision detection and resolution to the physics world class. [DONE]
7. Remove player-only collision detection and detect collision with arbitrary objects. [DONE]
8. Make physics world to be a pointer in the game. [DONE]
9. Clean up the Game.h headers. [DONE]
10. Clean up the Collisions API and refactor Manifold/ContactInfo. [DONE]
11. Refactor box collider component. [DONE]
12. Put Collisions checking into the box collider component. [DONE]
13. Implement Renderer class and move camera class inside of it. [DONE]
14. Log crash information in the console before closing. [DONE]
15. Compile to an output directory with a single executable. [DONE]
16. Allow VS debugger to attach and inspect running code. [DONE]
17. Implement global static debug renderer for all shapes. [DONE]
18. Make a prototype map. [DONE]
19. Make a prototype character. [DONE]
20. Implement tile map renderer. [DONE]
21. Clean up the included headers. [DONE]
22. Add compiler flag to enable/disable debug rendering. [DONE]
23. Add simple bullet shooting. [DONE]
24. Destroy bullets on impact. [DONE]
25. Fix stutterings when shooting and moving forward. [DONE]
26. Implement texture region drawing. [DONE]
27. Add basic moving AI enemy. [DONE]

May:
----
1. Pass collision info to the OnCollisionEnter function. [DONE]
2. Allow player single jump only. [DONE]
3. Flip player/enemy sprites in the direction they are moving. [DONE]
4. Basic audio support. [DONE]
5. Fix bullets passing through the enemies. [DONE]
6. Fix bullets passing through other colliders if bullet is created within the other collider. [DONE]
7. Add basic jumping and shooting sounds. [DONE]
8. Add gun muzzle flash. [DONE]
10. Fix audio memory leaks (nothing to do with audio though, debug rects were not cleared..). [DONE]
11. Add minimal bullet spread. [DONE]
12. Basic particle system. [DONE]
  12.1 Implement Vector3 and Vector4 for colors. [DONE]
  12.2 Implement basic particle drawing. [DONE]
  12.3 Implement particle rotation. [DONE]
13. Move texture loading to the renderer. [DONE]
  13.1 Implement SDL_Texture wrapper class. [DONE]
  13.2 Make SpriteComponent use Texture class. [DONE]
  13.3 Make TileMap use Texture class. [DONE]
  13.4 Make TileMap use Rectangle class. [DONE]
  13.5 Remove texture handling from the Game class. [DONE]
14. Refactor Rect class. [DONE]
15. Fix OnCollisionEnter not being call on the Enemy on every bullet hit. [DONE]
15.1 Implement OnTriggerEnter function. [DONE]
15.2 Remove dynamic casts in collision where possible. [DONE]
16. Add particles to the renderer automatically. [DONE]
17. Leave dust particles when player is jumping. [DONE]
18. Add bullet spark particles. [DONE]
19. Make rotation as part of the particle props. [DONE]
20. Fix particles with 0 alpha. [DONE]
21. Fix collisions happening too far from the actual object. [IN PROGRESS]
  21.1 Add line drawing to debug bullet raycast. [DONE]
22. Implement basic discrete collision detection using Minkowski Difference. [DONE]
23. Implement collision resolution using the penetration vector. [DONE]
24. Don't resolve collisions with objects marked as static. [DONE]

June:
-----
1. Implement collision sliding. [DONE]
2. Fix actor collision when direction arrow is pressed. [DONE]
2. Implement robust discrete collision detection and resolution with external forces. [DONE]
3. Fix actor micro-shaking when moving. [DONE]
4. Fix bullet collision. [DONE]
5. Organize project dependencies inside the external folder. [DONE]
  5.1 Create and add pugixml as a lib in external. [DONE]
  5.2 Add SDL2_image to the external. [DONE]
  5.3 Add SDL2 to the external. [DONE]
  5.4 Add FMOD to the external. [DONE]
6. Add Box2D to the external. [DONE]
7. Integrate b2World into the physics world class. [DONE]
8. Implement physics world debug renderer. [DONE]
9. Fix collider positions. [DONE]

July:
-----
1. Convert pixel size to unit size. [DONE]
2. Fix box collider sizes, they are not aligning at the moment. [DONE]
3. Fix objects moving in increments instead of smooth movement. [DONE]
4. Fix camera movement. [DONE]
5. Fix bodies moving in weird trajectories, probably because of wrong center of mass? [DONE]
6. Add debug renderer color support for different kinds of shapes and types. [DONE]
7. Object position and size from tile map should be using units instead of pixels. [DONE]
8. We don't need a separate tile map loader class, it can be a function instead (it doesn't have state). [DONE]
9. Remove struct constructors in tile map header, they are not needed. [DONE]
10. Remove all the useless pointers in the tile map loader and tile map. [DONE]
11. Remove tile map pointer from the tile map renderer. [DONE]
12. Refactor how rigidbodies and shapes are being created. [DONE]
13. Fix debug renderer camera bug. [IN PROGRESS]

Backlog
-------
11. Clean up the SDL main initialization: https://wiki.libsdl.org/SDL_SetMainReady
12. Load default texture if texture with a given name is missing.

How be brutally effective:
--------------------------
1. Get things done quickly
2. Get things done robustly
3. Make things simple
4. Finish things!
